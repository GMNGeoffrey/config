#!/bin/bash

set -euo pipefail

usage() {
    echo "Usage: $0 <source_branch> <target_branch> <start_commit> <filepath>"
    echo "Replays the history of a specific file from source_branch onto target_branch"
    echo "starting from the specified commit"
    exit 1
}

main() {
    local source_branch="$1"
    local target_branch="$2"
    local start_commit="$3"
    local filepath="$4"

    if [[ ! -f "${filepath}" ]]; then
        echo "Error: File '${filepath}' does not exist in the current directory."
        return 1
    fi

    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "Error: Not in a git repository."
        return 1
    fi

    if ! git merge-base --is-ancestor "${start_commit}" "${source_branch}"; then
        echo "Error: Commit '${start_commit}' is not in the history of branch '${source_branch}'."
        return 1
    fi

    local temp_branch="temp-file-history-replay-$(date +%s)"

    git checkout -b "${temp_branch}" "${target_branch}"

    local -a commits=()
    readarray -t commits < <(git log --first-parent "${start_commit}..${source_branch}" --reverse --format="%H" -- "${filepath}")

    for commit in "${commits[@]}"; do
        local commit_message
        commit_message="$(git log -1 "${commit}" --format=%B)"
        
        local commit_summary
        commit_summary="$(git log -1 "${commit}" --format=%s)"
        
        echo "Replaying commit: ${commit} - ${commit_summary}"
        
        git checkout "${commit}" -- "${filepath}"
        
        git add "${filepath}"
        
        git commit --no-verify -m "${commit_message}"
    done

    echo "File history replay complete. New commits are on branch '${temp_branch}'."
    echo "Review the changes and merge or delete the branch as needed."
}

if [[ $# -ne 4 ]]; then
    usage
fi

main "$1" "$2" "$3" "$4"
